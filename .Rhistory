import plotly.graph_objects as go
import numpy as np
x1_values = [-35170.11, -22987, -10803.89]; y1_values = [-1.262251373, -0.825000897, -0.387750422]
x2_values = [-35170.11, -22987, -10803.89]; y2_values = [-2.179242006, -1.304741054, -0.430240103]
m1, b1 = np.polyfit(x1_values, y1_values, 1); m2, b2 = np.polyfit(x2_values, y2_values, 1)
x1_regression_line = np.linspace(min(x1_values)-60000, max(x1_values)+120000, 100); y1_regression_line = m1 * x1_regression_line + b1
x2_regression_line = np.linspace(min(x2_values)-60000, max(x2_values)+120000, 100); y2_regression_line = m2 * x2_regression_line + b2
trace1 = go.Scatter(x=x1_values, y=y1_values, mode='markers', name='', showlegend=False); trace2 = go.Scatter(x=x2_values, y=y2_values, mode='markers', name='', showlegend=False)
regression_trace1 = go.Scatter(x=x1_regression_line, y=y1_regression_line, mode='lines', name='Proposed'); regression_trace2 = go.Scatter(x=x2_regression_line, y=y2_regression_line, mode='lines', name='Current')
fig = go.Figure(); fig.add_trace(trace1); fig.add_trace(trace2); fig.add_trace(regression_trace1); fig.add_trace(regression_trace2)
fig.update_layout(title='Financial leverage: Debt vs No Debt', xaxis_title='Earnings before Interest & Taxes', yaxis_title='Earnings per Share ($)', xaxis=dict(range=[min(x1_values + x2_values)-20000, max(x1_values + x2_values)+60000], zeroline=True, zerolinewidth=2, zerolinecolor='black'), yaxis=dict(range=[min(y1_values + y2_values)-0.5, max(y1_values + y2_values)+2.5], zeroline=True, zerolinewidth=2, zerolinecolor='black'))
fig.show()
# scatter plot for all firms. Value of credit analysis, ch20 slide 1
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
from scipy import stats
df = pd.read_excel("C://Users//eduar//OneDrive - BYU-Idaho//BYUI//2024_1 Winter//455 ECON//1 Final term paper//data//DATAVS.xlsx")
companies = ["RDUS", "CLH", "CWST", "NVRI", "RSG", "WM"]
def linear_regression(x, y):
slope, intercept, r, p, stderr = stats.linregress(x, y)
return slope, intercept, r**2
rows, cols = 2, 3
fig = make_subplots(rows=rows, cols=cols, subplot_titles=companies)
for i, company in enumerate(companies, 1):
row, col = ((i - 1) // cols) + 1, ((i - 1) % cols) + 1
x, y = df['11Accounts_Receivable_Trade_' + company], df['9Net_Income_Available_to_Common_' + company]
mask = ~np.isnan(x) & ~np.isnan(y)
x_filt, y_filt = x[mask], y[mask]
slope, intercept, r_squared = linear_regression(x_filt, y_filt)
fig.add_trace(go.Scatter(x=x_filt, y=y_filt, mode='markers', name=f'{company} Data'), row=row, col=col)
fig.add_trace(go.Scatter(x=x_filt, y=intercept + slope * x_filt, mode='lines', name='Trendline', line=dict(color='red', dash='dash')), row=row, col=col)
fig.add_annotation(dict(x=np.max(x_filt), y=np.min(y_filt), text=f'Y = {slope:.2f}X + {intercept:.2f}<br>R² = {r_squared:.2f}', showarrow=False, xref="x"+str(i), yref="y"+str(i)))
fig.update_layout(height=1000, width=1200, title_text="", showlegend=False)
fig.show()
# scatter plot for only one firm. Value of credit analysis, ch20 slide 18
import pandas as pd
import plotly.graph_objects as go
import numpy as np
from scipy import stats
df = pd.read_excel("C://Users//eduar//OneDrive - BYU-Idaho//BYUI//2024_1 Winter//455 ECON//1 Final term paper//data//DATAVS.xlsx")
x, y = df['11Accounts_Receivable_Trade_RDUS'], df['9Net_Income_Available_to_Common_RDUS']
mask = ~np.isnan(x) & ~np.isnan(y)
x_filt, y_filt = x[mask], y[mask]
slope, intercept, r_value, p_value, std_err = stats.linregress(x_filt, y_filt)
std_x, std_y = np.std(x_filt), np.std(y_filt)
fig = go.Figure()
fig.add_trace(go.Scatter(x=x_filt, y=y_filt, mode='markers', name='RDUS Data'))
fig.add_trace(go.Scatter(x=x_filt, y=intercept + slope * x_filt, mode='lines', name='Trendline', line=dict(color='red', dash='dash')))
fig.update_layout(title='RDUS Scatterplot with Trendline', xaxis_title='Accounts Receivable', yaxis_title='Net Income', showlegend=False, annotations=[dict(x=np.max(x_filt), y=np.min(y_filt), xref='x', yref='y', text=f'Y = {slope:.2f}X + {intercept:.2f}<br>R² = {r_value**2:.2f}<br>St_Dev X:{std_x:.0f} St_Dev Y:{std_y:.0f}', showarrow=False)])
fig.show()
import plotly.graph_objects as go
import numpy as np
x1_values = [-35170.11, -22987, -10803.89]; y1_values = [-1.262251373, -0.825000897, -0.387750422]
x2_values = [-35170.11, -22987, -10803.89]; y2_values = [-2.179242006, -1.304741054, -0.430240103]
m1, b1 = np.polyfit(x1_values, y1_values, 1); m2, b2 = np.polyfit(x2_values, y2_values, 1)
x1_regression_line = np.linspace(min(x1_values)-60000, max(x1_values)+120000, 100); y1_regression_line = m1 * x1_regression_line + b1
x2_regression_line = np.linspace(min(x2_values)-60000, max(x2_values)+120000, 100); y2_regression_line = m2 * x2_regression_line + b2
trace1 = go.Scatter(x=x1_values, y=y1_values, mode='markers', name='', showlegend=False); trace2 = go.Scatter(x=x2_values, y=y2_values, mode='markers', name='', showlegend=False)
regression_trace1 = go.Scatter(x=x1_regression_line, y=y1_regression_line, mode='lines', name='Proposed'); regression_trace2 = go.Scatter(x=x2_regression_line, y=y2_regression_line, mode='lines', name='Current')
fig = go.Figure(); fig.add_trace(trace1); fig.add_trace(trace2); fig.add_trace(regression_trace1); fig.add_trace(regression_trace2)
fig.update_layout(title='Financial leverage: Debt vs No Debt', xaxis_title='Earnings before Interest & Taxes', yaxis_title='Earnings per Share ($)', xaxis=dict(range=[min(x1_values + x2_values)-20000, max(x1_values + x2_values)+60000], zeroline=True, zerolinewidth=2, zerolinecolor='black'), yaxis=dict(range=[min(y1_values + y2_values)-0.5, max(y1_values + y2_values)+2.5], zeroline=True, zerolinewidth=2, zerolinecolor='black'))
fig.show()
# scatter plot for all firms. Value of credit analysis, ch20 slide 1
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
from scipy import stats
df = pd.read_excel("C://Users//eduar//OneDrive - BYU-Idaho//BYUI//2024_1 Winter//455 ECON//1 Final term paper//data//DATAVS.xlsx")
companies = ["RDUS", "CLH", "CWST", "NVRI", "RSG", "WM"]
def linear_regression(x, y):
slope, intercept, r, p, stderr = stats.linregress(x, y)
return slope, intercept, r**2
rows, cols = 2, 3
fig = make_subplots(rows=rows, cols=cols, subplot_titles=companies)
for i, company in enumerate(companies, 1):
row, col = ((i - 1) // cols) + 1, ((i - 1) % cols) + 1
x, y = df['11Accounts_Receivable_Trade_' + company], df['9Net_Income_Available_to_Common_' + company]
mask = ~np.isnan(x) & ~np.isnan(y)
x_filt, y_filt = x[mask], y[mask]
slope, intercept, r_squared = linear_regression(x_filt, y_filt)
fig.add_trace(go.Scatter(x=x_filt, y=y_filt, mode='markers', name=f'{company} Data'), row=row, col=col)
fig.add_trace(go.Scatter(x=x_filt, y=intercept + slope * x_filt, mode='lines', name='Trendline', line=dict(color='red', dash='dash')), row=row, col=col)
fig.add_annotation(dict(x=np.max(x_filt), y=np.min(y_filt), text=f'Y = {slope:.2f}X + {intercept:.2f}<br>R² = {r_squared:.2f}', showarrow=False, xref="x"+str(i), yref="y"+str(i)))
fig.update_layout(height=1000, width=1200, title_text="", showlegend=False)
fig.show()
# scatter plot for only one firm. Value of credit analysis, ch20 slide 18
import pandas as pd
import plotly.graph_objects as go
import numpy as np
from scipy import stats
df = pd.read_excel("C://Users//eduar//OneDrive - BYU-Idaho//BYUI//2024_1 Winter//455 ECON//1 Final term paper//data//DATAVS.xlsx")
x, y = df['11Accounts_Receivable_Trade_RDUS'], df['9Net_Income_Available_to_Common_RDUS']
mask = ~np.isnan(x) & ~np.isnan(y)
x_filt, y_filt = x[mask], y[mask]
slope, intercept, r_value, p_value, std_err = stats.linregress(x_filt, y_filt)
std_x, std_y = np.std(x_filt), np.std(y_filt)
fig = go.Figure()
fig.add_trace(go.Scatter(x=x_filt, y=y_filt, mode='markers', name='RDUS Data'))
fig.add_trace(go.Scatter(x=x_filt, y=intercept + slope * x_filt, mode='lines', name='Trendline', line=dict(color='red', dash='dash')))
fig.update_layout(title='RDUS Scatterplot with Trendline', xaxis_title='Accounts Receivable', yaxis_title='Net Income', showlegend=False, annotations=[dict(x=np.max(x_filt), y=np.min(y_filt), xref='x', yref='y', text=f'Y = {slope:.2f}X + {intercept:.2f}<br>R² = {r_value**2:.2f}<br>St_Dev X:{std_x:.0f} St_Dev Y:{std_y:.0f}', showarrow=False)])
fig.show()
# time series graph of Book leverage
import pandas as pd
import plotly.graph_objects as go
df = pd.read_excel("C://Users//eduar//OneDrive - BYU-Idaho//BYUI//2024_1 Winter//455 ECON//1 Final term paper//data//DATAVS.xlsx")
q_rdus = df['Q_RDUS']
book_leverage_rdus = df['43Book  Leverage_RDUS']
fig = go.Figure()
fig.add_trace(go.Scatter(x=q_rdus, y=book_leverage_rdus, mode='lines+markers', name='Book Leverage'))
fig.update_layout(title='Relationship of RDUS with Book Leverage', xaxis_title='Quaters', yaxis_title='Book Leverage', legend_title='Variable') # edit text
fig.show()
# Common stock vs last price graph
import pandas as pd
import plotly.graph_objects as go
df=pd.read_excel("C://Users//eduar//OneDrive - BYU-Idaho//BYUI//2024_1 Winter//455 ECON//1 Final term paper//data//DATAVS.xlsx")
q, common_stock, last_price=df['Q_RDUS'],df['25Common Stock_RDUS'],df['24Last Price_RDUS']
fig=go.Figure()
fig.add_trace(go.Scatter(x=q,y=common_stock,mode='lines+markers',name='Common Stock'))
fig.add_trace(go.Scatter(x=q,y=last_price,mode='lines+markers',name='Last Price',yaxis='y2'))
fig.update_layout(title='Common Stock vs Last Price',xaxis_title='Quarters',yaxis=dict(title='Common Stock (in thousands)',side='left'),yaxis2=dict(title='Last Price',side='right',overlaying='y',showgrid=False),legend_title='Variable')
fig.show()
# time series for RDUS days accounts
import pandas as pd
import plotly.graph_objects as go
df = pd.read_excel("C://Users//eduar//OneDrive - BYU-Idaho//BYUI//2024_1 Winter//455 ECON//1 Final term paper//data//DATAVS.xlsx")
q_rdus = df['Q_RDUS'] # edit variable
days_sales_receivables_rdus = df["60Day's sales in receivables_RDUS"] # edit variable
days_sales_inventory_rdus = df["58Day's sales in inventory_RDUS"] # edit variable
payable_turnover_rdus = df['62payable turnover_RDUS'] # edit variable
fig = go.Figure()
fig.add_trace(go.Scatter(x=q_rdus, y=days_sales_receivables_rdus, mode='lines+markers', name="Receivables")) # edit names/titles
fig.add_trace(go.Scatter(x=q_rdus, y=days_sales_inventory_rdus, mode='lines+markers', name="Inventory")) # edit names/titles
fig.add_trace(go.Scatter(x=q_rdus, y=payable_turnover_rdus, mode='lines+markers', name='Payable')) # edit names/titles
fig.update_layout(title='Time Series line Grpah for RDUS Days accounts variables: Receivables, Inventory, and Payables', xaxis_title='', yaxis=dict(title="Days", side='left'), legend_title='Variable') # edit names/titles
fig.show()
# ECON 355 yield curve projet with updated data
import pandas as pd
from plotly.subplots import make_subplots
import plotly.graph_objects as go
file_path_new = "C://Users//eduar//OneDrive - BYU-Idaho//BYUI//2024_1 Winter//381 ECON//IS-MP Simulations//fredgraph.csv"
df_new = pd.read_csv(file_path_new)
df_new['DATE'] = pd.to_datetime(df_new['DATE'])
start_date_new = '2013-01-01'  # edit data
end_date_new = '2023-12-31'
mask_new = (df_new['DATE'] >= start_date_new) & (df_new['DATE'] <= end_date_new)
filtered_df_new = df_new.loc[mask_new]
file_path = "c://Users//eduar//OneDrive - BYU-Idaho//BYUI//2023_9 Fall Semester//Econ 355//5 Project  - Yield Curves and Macroeconomic Performance//355ECON Project data.xlsx"
df = pd.read_excel(file_path)
df['Spread Date'] = pd.to_datetime(df['Spread Date'])
start_date = '2013-01-01' # edit date
end_date = '2023-12-31'
mask = (df['Spread Date'] >= start_date) & (df['Spread Date'] <= end_date)
filtered_df = df.loc[mask]
fig = make_subplots(rows=1, cols=2, subplot_titles=('Yield Plot', 'Recession Indicator (JHDUSRGDPBR) vs 10 & 3 year note Spread'))
fig.add_trace(go.Scatter(x=filtered_df_new['DATE'], y=filtered_df_new['DGS10'], name='10-Y Treasury yield', mode='lines', line=dict(color='royalblue')), row=1, col=1)
fig.add_trace(go.Scatter(x=filtered_df_new['DATE'], y=filtered_df_new['DTB3'], name='3-Y Treasury yield', mode='lines', line=dict(color='green')), row=1, col=1)
fig.add_trace(go.Scatter(x=filtered_df_new['DATE'], y=filtered_df_new['FEDFUNDS'], name='FEDFUNDS', mode='lines', line=dict(color='purple')), row=1, col=1)
fig.add_trace(go.Scatter(x=filtered_df['Spread Date'], y=filtered_df['Spread'], name='Spread'), row=1, col=2)
fig.add_trace(go.Scatter(x=filtered_df['Spread Date'], y=filtered_df['JHDUSRGDPBR'], name='JHDUSRGDPBR'), row=1, col=2)
fig.update_layout(height=600, width=1200, title_text="")
fig.show()
#| echo: true
# -----------------First Regression------------------
import pandas as pd
from sklearn.linear_model import LinearRegression
from statsmodels.regression.linear_model import OLS
import statsmodels.api as sm
file_path = "C://Users//eduar//OneDrive - BYU-Idaho//BYUI//2024_1 Winter//455 ECON//3 Term paper//data1.xlsx"
df = pd.read_excel(file_path)
X = df[['Total Asset Turnover', 'Return on Assets', 'PPE to Asset ratio', 'Market to Book ratio', 'Depreciation to Asset ratio',
'Return on Equity', 'Current ratio', 'Dividend Pay Out ratio']]
y = df['Debt-Equity Ratio']
X_with_constant = sm.add_constant(X)
model = OLS(y, X_with_constant).fit()
print(model.summary())
#| echo: true
# -----------------First Regression------------------
import pandas as pd
from sklearn.linear_model import LinearRegression
from statsmodels.regression.linear_model import OLS
import statsmodels.api as sm
file_path = "C://Users//eduar//OneDrive - BYU-Idaho//BYUI//2024_1 Winter//455 ECON//3 Term paper//data1.xlsx"
df = pd.read_excel(file_path)
X = df[['Total Asset Turnover', 'Return on Assets', 'PPE to Asset ratio', 'Market to Book ratio', 'Depreciation to Asset ratio',
'Return on Equity', 'Current ratio', 'Dividend Pay Out ratio']]
y = df['Debt-Equity Ratio']
X_with_constant = sm.add_constant(X)
model = OLS(y, X_with_constant).fit()
print(model.summary())
library(reticulate) #loads python env
library(reticulate) #loads python env
reticulate::repl_python()
library(reticulate) #loads python env
use_virtualenv("C:/git/Portfolio_/.venv", required = TRUE) # optional
py_config() # confirm using root env
reticulate::repl_python()
